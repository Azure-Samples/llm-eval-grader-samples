# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

"""
Description:
This file contains the code to interact with the Azure OpenAI API to generate responses for the chatbot.
This is having the following prompts:
1. intent_detection_model: This model is used to detect the intent of the user's query and identify the intent from the user's query.
2. grocery_model: This model is used to answer any questions related to buying food and other goods for the household.
3. home_model: This model is used to answer any questions related to home improvement, maintenance, and decoration.
4. clothing_model: This model is used to answer any questions related to buying clothes, shoes, and accessories.
5. electronics_model: This model is used to answer any questions related to buying electronic devices and gadgets.
6. pharmacy_model: This model is used to answer any questions related to buying medicines and health-related products.
7. general_model: This model is used to answer any general questions that are not covered in the above categories.
"""
from openai import AzureOpenAI
from dotenv import load_dotenv
import logging
import os


class ChatModel:
    """Description: This class contains the code to interact with the Azure OpenAI API to generate responses for the chatbot."""
    def __init__(self, logger=logging.getLogger(__name__)):
        """
        Description: This method initializes the ChatModel class with the Azure OpenAI API configuration.

        Args:
        - logger: The logger object to log information about the chatbot responses and conversation history.
        """
        # Load the environment variables
        load_dotenv()

        # Set the API key of azure openai
        self.client = AzureOpenAI(
            api_key=os.getenv("API_KEY"),
            azure_endpoint=os.getenv("AZURE_ENDPOINT"),
            api_version=os.getenv("API_VERSION")
        )
        self.deployment_name = os.getenv("DEPLOYMENT_NAME")
        self.logger = logger

    def _generate_response(self, message: str, max_token: int = 100, temperature: int = 0.5) -> dict:
        """
        Description: This method generates a response from the Azure OpenAI API based on the input message.

        Args:
        - message: The message to send to the Azure OpenAI API for generating a response.
        - max_token: The maximum number of tokens to generate in the response.
        - temperature: The temperature parameter for sampling the next token in the response.

        Returns:
        - response: The response generated by the Azure OpenAI API.
        """
        # Send a chat completion request
        response = self.client.chat.completions.create(
            model=self.deployment_name,
            messages=message,
            max_tokens=max_token,
            temperature=temperature,
        )
        return response
    
    def intent_detection_model(self, question: str, context: str = None) -> str:
        """
        Description: This method detects the intent of the user's query and identifies the intent from the user's query.

        Args:
        - question: The user's query for which the intent needs to be detected.
        - context: The context from the previous conversation to make the intent detection relevant to the context.

        Returns:
        - intent: The intent detected from the user's query.
        - response: The response generated by the Azure OpenAI API for the intent detection model.
        """
        question_with_context = question
        if context:
            question_with_context = f"Conversation History: {context}\n\nCurrent question: {question}"
        message = [
            {
                "role": "system",
                "content": """
                You are a chat bot representative for Company Contoso who sells different products, who can understand the intent of the user's query and identify the intent from user's query.

                The following the possibilities of the user's intent:

                1. grocery: if the query is about buying food and other goods for the household.
                2. home: if the query is about home improvement, maintenance, and decoration.
                3. clothing: if the query is about buying clothes, shoes, and accessories.
                4. electronics: if the query is about buying electronic devices and gadgets.
                5. pharmacy: if the query is about buying medicines and health-related products.
                6. general: Anything that is not covered in the above categories.

                There will be ONLY ONE intent detected from the user's query, find the best possible intent from the user's query.
                If there is any context from the previous conversation, make intent detection relevant to the context.
                """
            },
            {
                "role": "user",
                "content": "Compare the prices of different brands of laptops."
            },
            {
                "role": "assistant",
                "content": "electronics"
            },
            {
                "role": "user",
                "content": "What is the best way to cook a steak?"
            },
            {
                "role": "assistant",
                "content": "grocery"
            },
            {
                "role": "user",
                "content": "What medicine should I take for a headache?"
            },
            {
                "role": "assistant",
                "content": "pharmacy"
            },
            {
                "role": "user",
                "content": question_with_context
            }
        ]
        response = self._generate_response(message=message, max_token=10, temperature=0.9)
        intent = response.choices[0].message.content.split("\n")[-1].strip()
        if intent not in ["grocery", "home", "clothing", "electronics", "pharmacy", "general"]:
            self.logger.error(f"Invalid intent detected: {response}, setting the intent to general")
            intent = "general"
        return intent, response
    
    def grocery_model(self, question: str, context: str = None) -> str:
        """
        Description: This method generates a response for the grocery model based on the user's query.

        Args:
        - question: The user's query related to buying food and other goods for the household.
        - context: The context from the previous conversation to make the response relevant to the context.

        Returns:
        - response: The response generated by the Azure OpenAI API for the grocery model.
        """
        question_with_context = question
        if context:
            question_with_context = f"Conversation History: {context}\n\nCurrent question: {question}"
        message = [
            {
                "role": "system",
                "content": """
                You are a chat bot representative for Company Contoso who sells different products, who can answer any questions related to buying food and other goods for the household.
                Make the answer as detailed as possible with several option, hints and followup questions that can make user grocery shopping easier.

                If there is any context from the previous conversation, please make the answer relevant to the context.
                """
            },
            {
                "role": "user",
                "content": "What are the different types of apples available in the market?"
            },
            {
                "role": "assistant",
                "content": "There are several types of apples available in the market such as Fuji, Gala, Honeycrisp, and Granny Smith. Which one do you prefer?"
            },
            {
                "role": "user",
                "content": question_with_context
            }
        ]
        response = self._generate_response(message=message, max_token=1000, temperature=0.5)
        return response
    
    def home_model(self, question: str, context: str = None) -> str:
        """
        Description: This method generates a response for the home model based on the user's query.

        Args:
        - question: The user's query related to home improvement, maintenance, and decoration.
        - context: The context from the previous conversation to make the response relevant to the context.

        Returns:
        - response: The response generated by the Azure OpenAI API for the home model.
        """
        question_with_context = question
        if context:
            question_with_context = f"Conversation History: {context}\n\nCurrent question: {question}"
        message = [
            {
                "role": "system",
                "content": """
                You are a chat bot representative for Company Contoso who sells different products, who can answer any questions related to home improvement, maintenance, and decoration.
                Make the answer as detailed as possible with several option, hints and followup questions that can make user home improvement better and user buying experience easier.

                If there is any context from the previous conversation, please make the answer relevant to the context.
                """
            },
            {
                "role": "user",
                "content": "What are the different types of paints available in the market?"
            },
            {
                "role": "assistant",
                "content": "There are several types of paints available in the market such as water-based, oil-based, and latex. Which one do you prefer?"
            },
            {
                "role": "user",
                "content": question_with_context
            }
        ]
        response = self._generate_response(message=message, max_token=1000, temperature=0.5)
        return response

    def clothing_model(self, question: str, context: str = None) -> str:
        """
        Description: This method generates a response for the clothing model based on the user's query.

        Args:
        - question: The user's query related to buying clothes, shoes, and accessories.
        - context: The context from the previous conversation to make the response relevant to the context.

        Returns:
        - response: The response generated by the Azure OpenAI API for the clothing model.
        """
        question_with_context = question
        if context:
            question_with_context = f"Conversation History: {context}\n\nCurrent question: {question}"
        message = [
            {
                "role": "system",
                "content": """
                You are a chat bot representative for Company Contoso who sells different products, who can answer any questions related to buying clothes, shoes, and accessories.
                Make the answer as detailed as possible with several option, hints and followup questions that can help user to choose the best clothes, shoes, and accessories.

                If there is any context from the previous conversation, please make the answer relevant to the context.
                """
            },
            {
                "role": "user",
                "content": "What are the different types of shoes available in the market?"
            },
            {
                "role": "assistant",
                "content": "There are several types of shoes available in the market such as sneakers, sandals, and boots. Which one do you prefer?"
            },
            {
                "role": "user",
                "content": question_with_context
            }
        ]
        response = self._generate_response(message=message, max_token=1000, temperature=0.5)
        return response

    def electronics_model(self, question: str, context: str = None) -> str:
        """
        Description: This method generates a response for the electronics model based on the user's query.

        Args:
        - question: The user's query related to buying electronic devices and gadgets.
        - context: The context from the previous conversation to make the response relevant to the context.

        Returns:
        - response: The response generated by the Azure OpenAI API for the electronics model.
        """
        question_with_context = question
        if context:
            question_with_context = f"Conversation History: {context}\n\nCurrent question: {question}"
        message = [
            {
                "role": "system",
                "content": """
                You are a chat bot representative for Company Contoso who sells different products, who can answer any questions related to buying electronic devices and gadgets.
                Make the answer as detailed as possible with several option, hints and followup questions that can help user determine the right choice with all the features and specifications.

                If there is any context from the previous conversation, please make the answer relevant to the context.
                """
            },
            {
                "role": "user",
                "content": "What are the different types of laptops available in the market?"
            },
            {
                "role": "assistant",
                "content": "There are several types of laptops available in the market such as gaming, business, and personal laptops. Which one do you prefer?"
            },
            {
                "role": "user",
                "content": question_with_context
            }
        ]
        response = self._generate_response(message=message, max_token=1000, temperature=0.5)
        return response

    def pharmacy_model(self, question: str, context: str = None) -> str:
        """
        Description: This method generates a response for the pharmacy model based on the user's query.

        Args:
        - question: The user's query related to buying medicines and health-related products.
        - context: The context from the previous conversation to make the response relevant to the context.

        Returns:
        - response: The response generated by the Azure OpenAI API for the pharmacy model.
        """
        question_with_context = question
        if context:
            question_with_context = f"Conversation History: {context}\n\nCurrent question: {question}"
        message = [
            {
                "role": "system",
                "content": """
                You are a chat bot representative for Company Contoso who sells different products, who can answer any questions related to buying medicines and health-related products.
                Make the answer as detailed as possible with several option, hints and followup questions that can help user to choose the best medicines and health-related products.
                Also help user with the right dosage and side effects of the medicines.

                If there is any context from the previous conversation, please make the answer relevant to the context.
                """
            },
            {
                "role": "user",
                "content": "What are the different types of medicines available in the market?"
            },
            {
                "role": "assistant",
                "content": "There are several types of medicines available in the market such as painkillers, antibiotics, and antihistamines. Which one do you prefer?"
            },
            {
                "role": "user",
                "content": question_with_context
            }
        ]
        response = self._generate_response(message=message, max_token=1000, temperature=0.5)
        return response

    def general_model(self, question: str, context: str = None) -> str:
        """
        Description: This method generates a response for the general model based on the user's query.

        Args:
        - question: The user's general query that is not covered in the above categories.
        - context: The context from the previous conversation to make the response relevant to the context.

        Returns:
        - response: The response generated by the Azure OpenAI API for the general model.
        """
        question_with_context = question
        if context:
            question_with_context = f"Conversation History: {context}\n\nCurrent question: {question}"
        message = [
            {
                "role": "system",
                "content": """
                You are a chat bot representative for Company Contoso who sells different products, who can answer any general questions that are not covered in the above categories.
                Make the answer enriched with follow up questions and options, so that the user stays engaged and gets the best possible answer.

                If there is any context from the previous conversation, please make the answer relevant to the context.
                """
            },
            {
                "role": "user",
                "content": "What can do for me?"
            },
            {
                "role": "assistant",
                "content": "I can help you with buying food and other goods for the household, home improvement, maintenance, and decoration, buying clothes, shoes, and accessories, buying electronic devices and gadgets, buying medicines and health-related products, and any general questions that are not covered in the above categories."
            },
            {
                "role": "user",
                "content": question_with_context
            }
        ]
        response = self._generate_response(message=message, max_token=1000, temperature=0.5)
        return response

    def generate_response(self, question: str, context: str = None, conversation_id: str = None, turn_id: str = None) -> str:
        """
        Description: This method generates a response for the chatbot based on the user's query and context.

        Args:
        - question: The user's query for which the chatbot needs to generate a response.
        - context: The context from the previous conversation to make the response relevant to the context.
        - conversation_id: The unique identifier for the conversation session.
        - turn_id: The unique identifier for the current turn in the conversation.

        Returns:
        - response: The response generated by the Azure OpenAI API for the chatbot.
        """
        chat_model = ChatModel()
        intent, intent_llm_response = chat_model.intent_detection_model(question, context)
        model = "general_model"
        if intent == "grocery":
            response = chat_model.grocery_model(question, context)
            model = "grocery_model"
        elif intent == "home":
            response = chat_model.home_model(question, context)
            model = "home_model"
        elif intent == "clothing":
            response = chat_model.clothing_model(question, context)
            model = "clothing_model"
        elif intent == "electronics":
            response = chat_model.electronics_model(question, context)
            model = "electronics_model"
        elif intent == "pharmacy":
            response = chat_model.pharmacy_model(question, context)
            model = "pharmacy_model"
        else:
            response = chat_model.general_model(question, context)
        self.logger.info("llm_data", extra={
            "conversation_id": conversation_id,
            "turn_id": turn_id,
            "query": question,
            "context": context,
            "intent": intent,
            "llm_response": intent_llm_response.to_json(),
            "model": "intent_detection_model",
        })
        self.logger.info("llm_data", extra={
            "conversation_id": conversation_id,
            "turn_id": turn_id,
            "query": question,
            "context": context,
            "intent": intent,
            "llm_response": response.to_json(),
            "model": model,
        })
        return response.choices[0].message.content
